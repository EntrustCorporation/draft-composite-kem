



LAMPS                                                       M. Ounsworth
Internet-Draft                                                   J. Gray
Intended status: Standards Track                                 Entrust
Expires: January 3, 2023                                   July 02, 2022


                 Composite KEM For Use In Internet PKI
                  draft-ounsworth-pq-composite-kem-00

Abstract

   The migration to post-quantum cryptography is unique in the history
   of modern digital cryptography in that neither the old outgoing nor
   the new incoming algorithms are fully trusted to protect data for the
   required data lifetimes.  The outgoing algorithms, such as RSA and
   elliptic curve, may fall to quantum cryptalanysis, while the incoming
   post-quantum algorithms face uncertainty about both the underlying
   mathematics as well as hardware and software implementations that
   have not had sufficient maturing time to rule out classical
   cryptanalytic attacks and implementation bugs.

   Cautious implementors may wish to layer cryptographic algorithms such
   that an attacker would need to break all of them in order to
   compromise the data being protected.  For digital signatures, this is
   referred to as "dual", and for encryption key establishment this as
   reffered to as "hybrid".  This document, and its companions, defines
   a specific instantiation of the dual and hybrid paradigm called
   "composite" where multiple cryptographic algorithms are combined to
   form a single key, signature, or key encapsulation mechanism (KEM)
   such that they can be treated as a single atomic object at the
   protocol level.

   EDNOTE: the terms "dual" and "hybrid" are currently in flux.  We
   anticipate an Informational draft to normalize terminology, and will
   update this draft accordingly.

   This document defines a Composite key encapsulation mechanism (KEM)
   procedure, for use with Composite keys which consist of combinations
   of Encryption or KEM algorithms for each composite component
   algorithm.

   This document is intended to be coupled with the composite keys
   structure define in [draft-ounsworth-pq-composite-keys-01] and the
   CMS KEM-TRANS mechanism in [draft-perret-prat-lamps-cms-pq-kem-00].







Ounsworth & Gray         Expires January 3, 2023                [Page 1]

Internet-Draft              PQ Composite Keys                  July 2022


Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 3, 2023.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   4
   2.  Composite KEM Structures  . . . . . . . . . . . . . . . . . .   5
     2.1.  Key Encapsulation Mechanisms (KEMs) . . . . . . . . . . .   5
     2.2.  Composite Keys  . . . . . . . . . . . . . . . . . . . . .   6
       2.2.1.  Key Usage Bits  . . . . . . . . . . . . . . . . . . .   6
     2.3.  kem-CompositeKEM  . . . . . . . . . . . . . . . . . . . .   7
     2.4.  CompositeCiphertextValue  . . . . . . . . . . . . . . . .   7
     2.5.  Encoding Rules  . . . . . . . . . . . . . . . . . . . . .   7
   3.  Algorithm Identifiers . . . . . . . . . . . . . . . . . . . .   7
     3.1.  id-alg-composite  . . . . . . . . . . . . . . . . . . . .   7
     3.2.  Other Explicit Algorithms . . . . . . . . . . . . . . . .   7
   4.  Composite Key Encapsulation . . . . . . . . . . . . . . . . .   8
   5.  Composite Key Decapsulation . . . . . . . . . . . . . . . . .   8



Ounsworth & Gray         Expires January 3, 2023                [Page 2]

Internet-Draft              PQ Composite Keys                  July 2022


     5.1.  Composite KEM CipherText Encoding . . . . . . . . . . . .   9
     5.2.  Generic vs Explicit Variants  . . . . . . . . . . . . . .  10
   6.  In Practice . . . . . . . . . . . . . . . . . . . . . . . . .  10
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  10
     8.1.  Policy for Deprecated and Acceptable Algorithms . . . . .  11
     8.2.  OR Modes  . . . . . . . . . . . . . . . . . . . . . . . .  11
     8.3.  Cryptographic review of combiner  . . . . . . . . . . . .  11
       8.3.1.  APOP Attack on concatenated keys  . . . . . . . . . .  11
       8.3.2.  Aviram2022  . . . . . . . . . . . . . . . . . . . . .  12
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  12
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  12
     9.2.  Informative References  . . . . . . . . . . . . . . . . .  14
   Appendix A.  Examples . . . . . . . . . . . . . . . . . . . . . .  15
   Appendix B.  ASN.1 Module . . . . . . . . . . . . . . . . . . . .  15
   Appendix C.  Intellectual Property Considerations . . . . . . . .  17
   Appendix D.  Contributors and Acknowledgements  . . . . . . . . .  17
     D.1.  Making contributions  . . . . . . . . . . . . . . . . . .  17
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  17

1.  Introduction

   During the transition to post-quantum cryptography, there will be
   uncertainty as to the strength of cryptographic algorithms; we will
   no longer fully trust traditional cryptography such as RSA, Diffie-
   Hellman, DSA and their elliptic curve variants, while me may also not
   fully trust their post-quantum replacements until they have had
   sufficient scrutiny and time to discover and fix implementation bugs.
   Unlike previous cryptographic algorithm migrations, the choice of
   when to migrate and which algorithms to migrate to, is not so clear.
   Even after the migration period, it may be advantageous for an
   entity's cryptographic identity to be composed of multiple public-key
   algorithms.

   The deployment of composite public keys, and composite signatures and
   composite encryption using post-quantum algorithms will face two
   challenges

   o  Algorithm strength uncertainty: During the transition period, some
      post-quantum signature and encryption algorithms will not be fully
      trusted, while also the trust in legacy public key algorithms will
      start to erode.  A relying party may learn some time after
      deployment that a public key algorithm has become untrustworthy,
      but in the interim, they may not know which algorithm an adversary
      has compromised.






Ounsworth & Gray         Expires January 3, 2023                [Page 3]

Internet-Draft              PQ Composite Keys                  July 2022


   o  Migration: During the transition period, systems will require
      mechanisms that allow for staged migrations from fully classical
      to fully post-quantum-aware cryptography.

   This document provides a mechanism to address algorithm strength
   uncertainty by building on [draft-ounsworth-pq-composite-keys-00]
   (NOTE: need kramdown formatting help with this ref) by providing the
   format and process for combining multiple cryptographic algorithms
   into a single key encapsulation operation.  Backwards compatibility
   is addressed via using composite in conjunction with a non-composite
   hybrid mode such as that described in [draft-becker-guthrie-
   noncomposite-hybrid-auth-00] (NOTE: need kramdown formatting help
   with this ref).

   This document is intended for general applicability anywhere that key
   establishment or enveloped content encryption is used within PKIX or
   CMS structures.

1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The following terms are used in this document:

   ALGORITHM: An information object class for identifying the type of
   cryptographic key being encapsulated.

   BER: Basic Encoding Rules (BER) as defined in [X.690].

   CLIENT: Any software that is making use of a key at runtime.  This
   includes a signer, verifyir, encryptor, decryptor.

   COMBINER MODE: A combiner mode specifies how keys are to be combined
   together into a single cryptographic operation.  Examples include
   AND, OR, K-of-N.  Specifications of composite signature or encryption
   proceedures will need to specify the behaviour under each mode.

   COMPONENT ALGORITHM: A single basic algorithm which is contained
   within a composite algorithm.

   COMPOSITE ALGORITHM: An algorithm which is a sequence of two or more
   component algorithms.

   DER: Distinguished Encoding Rules as defined in [X.690].



Ounsworth & Gray         Expires January 3, 2023                [Page 4]

Internet-Draft              PQ Composite Keys                  July 2022


   KEM: A key encapsulation mechanism as defined in Section 2.1.

   POST-QUANTUM AGLORITHM: Any cryptographic algorithm which is believed
   to be resistant to classical and quantum cryptanalysis, such as the
   algorithms being considered for standardization by NIST.

   PUBLIC / PRIVATE KEY: The public and private portion of an asymmetric
   cryptographic key, making no assumptions about which algorithm.

   SHARED SECRET: A value established between two communicating parties
   by means of a cryptographic operation, but which cannot be learned by
   an active or passive adversary.

2.  Composite KEM Structures

2.1.  Key Encapsulation Mechanisms (KEMs)

   We borrow here the definition of a key encapsulation mecanism (KEM)
   from [I-D.draft-ietf-tls-hybrid-design], in which a KEM consists of
   three algorithms:

   o  KeyGen() -> (pk, sk): A probabilistic key generation algorithm,
      which generates a public key pk and a secret key sk.

   o  Encaps(pk) -> (ct, ss): A probabilistic encapsulation algorithm,
      which takes as input a public key pk and outputs a ciphertext ct
      and shared secret ss.

   o  Decaps(sk, ct) -> ss: A decapsulation algorithm, which takes as
      input a secret key sk and ciphertext ct and outputs a shared
      secret ss, or in some cases a distinguished error value.

   This document is not concerned with the KeyGen() algorithm of a KEM,
   but it is included for completeness.

   The KEM interface defined above differs from both tradational key
   transport mechanism (for example for use with KeyTransRecipientInfo
   defined in [RFC5652]), and key agreement (for example for use with
   KeyAgreeRecipientInfo defined in [RFC5652]).

   The KEM interface was chosen as the interface for a composite key
   exchange because both key transport and key agreement mechanisms can
   be promoted into KEMs in the following ways:

   A key transport mechanism can be promoted into a KEM.Encaps(pk) by
   generating a random shared secret ss and performing
   KeyTrans.Encrypt(pk, ss) -P ct; and into a KEM.Decaps(sk, ct) by




Ounsworth & Gray         Expires January 3, 2023                [Page 5]

Internet-Draft              PQ Composite Keys                  July 2022


   KeyTrans.Decrypt(sk, ct) -> ss.  This follows the pattern of RSA-KEM
   [RFC5990].

   A key agreement mechanism can be promoted into a KEM.Encaps(pk) by
   generating an ephemeral key pair (pk_e, sk_e), and performing
   KeyAgree(pk, sk_e) -> (ss, pk_e); and into a KEM.Decaps(sk, ct) by
   completing the key agreement as KeyAgree(pk_e, sk) -> ss.

   A composite KEM allows two or more underlying key transport, key
   agreement, or KEM alogrithms to be combined into a single
   cryptographic operations by performing each operation, promoted to a
   KEM as outline above, and concatenating all component shared secrets
   into a single shared secret.

   The main security property for KEMs is indistinguishability under
   adaptive chosen ciphertext attack (IND-CCA2), which means that shared
   secret values should be indistinguishable from random strings even
   given the ability to have other arbitrary ciphertexts decapsulated.

   A weaker security notion is indistinguishability under chosen
   plaintext attack (IND-CPA), which means that the shared secret values
   should be indistinguishable from random strings given a copy of the
   public key.  IND-CPA roughly corresponds to security against a
   passive attacker, and sometimes corresponds to one-time key exchange.

   The composite KEM mechanisms meets these security properties if and
   only if the component primitives meet them.

   TODO: needs more formal analysis that the methods of promoting
   KeyTrans and KeyAgree meet this.

   TODO: QUESTION: If we return "SS = SS1 || .. || SSn", does that make
   this mechanism fail IND-CCA2?  Do we need to carry a KDF here too and
   do "SS = KDF(SS1 || .. || SSn)"?  Also take another look at
   Section 8.3.1 with regards to this question.

2.2.  Composite Keys

   TODO

2.2.1.  Key Usage Bits

   TODO








Ounsworth & Gray         Expires January 3, 2023                [Page 6]

Internet-Draft              PQ Composite Keys                  July 2022


2.3.  kem-CompositeKEM

   TODO

2.4.  CompositeCiphertextValue

   TODO

   CompositeCihpertextValue ::= SEQUENCE SIZE (2..MAX) OF BIT STRING

2.5.  Encoding Rules

   Many protocol specifications will require that composite KEM data
   structures be represented by an octet string or bit string.

   When an octet string is required, the DER encoding of the composite
   data structure SHALL be used directly.

   EDNOTE: will this definition include an ASN.1 tag and length byte
   inside the OCTET STRING object?  If so, that's probably an extra
   uneccessary layer.

   When a bit string is required, the octets of the DER encoded
   composite data structure SHALL be used as the bits of the bit string,
   with the most significant bit of the first octet becoming the first
   bit, and so on, ending with the least significant bit of the last
   octet becoming the last bit of the bit string.

   In the interests of simplicity and avoiding compatibility issues,
   implementations that parse these structures MAY accept both BER and
   DER.

3.  Algorithm Identifiers

   TODO

3.1.  id-alg-composite

   TODO

3.2.  Other Explicit Algorithms

   TODO








Ounsworth & Gray         Expires January 3, 2023                [Page 7]

Internet-Draft              PQ Composite Keys                  July 2022


4.  Composite Key Encapsulation

   Composite key encapsulations takes a CompositePublicKey as its input.
   The CompositePublicKey MUST contain composite keys (Pi .. Pn) which
   represent an algorithm which is a KEM (Key Encapsulation Method), or
   an algorithm that contains encryption or decryption primitive.  For
   example (RSA).

   This operation outputs a shared-secret and cipher text.

   Input:  CompositePublicKey (PK1, PK2 .. PKn)

   Output:  SS, CT

   1.  for i := 1 to n
          if PKi is of type KEM:
             SSi, CTi := encaps(PKi)

          else, if PKi is of type keyEncipherment:
            SSi := random_bits(SIZE)
            CTi := encrypt(SSi, PKi)

          else, if PKi is of type keyAgreement:
             PKe, SKe := keyGen()
             SSi := keyAgree(PKi, SKe)
             CTi := PKe


     2.  SS = SSi ||  SSn
         CT = CT1, CT2, .., CTn

5.  Composite Key Decapsulation

   Composite key decapsulations takes a CompositePrivateKey as its input
   and the sequence of Cipher texts (ct1 .. ctn) computed by the
   composite key encapsulation method.  The CompositePrivateKey MUST
   contain composite keys (Pi .. Pn) which represent an algorithm which
   is a KEM (Key Encapsulation Method), or an algorithm that contains
   encryption or decryption primitive.  These keys MUST consist of the
   same component keys in the same order as the Composite Key
   Encapsulation process that generated them.

   This operation outputs a shared-secret.








Ounsworth & Gray         Expires January 3, 2023                [Page 8]

Internet-Draft              PQ Composite Keys                  July 2022


   Input:   CompositePrivateKey = SK1, SK2 .. SKn
             CT = CT1, CT2, .., CTn

   Output:  SS

   1. for i := 1 to n

         if SKi is of type KEM:
             SSi := decaps(Cti, SKi)

         else, if SKi is of type keyEncipherment:
             SSi := decrypt(Cti, SKi)

          else, if PKi is of type keyAgreement:
             PKe := decode(CTi)
             SSi := keyAgree(PKe, SKi)

   2. Output SS = SSi ||  SSn

   ~~~ BEGIN EDNOTE ~~~ EDNOTE: We need to add a KDF-based combiner
   here.  Suggestions are: SS = KDF( KDF(SS1) || KDF(SS2) || .. ||
   KDF(SSn) ) or SS = KDF( KDF(SS1) XOR KDF(SS2) XOR .. XOR KDF(SSn) )

   Note that the obvious simpler constructions don't work in cases where
   the attacker can control one or more inputs and gets, see the
   resulting shared secret, and submit multiple queries against the same
   SS2 (ie SS2 is derived from a static-key non-ephemeral protocol.
   Therefore should not be used:

   SS = KDF( SS1 || SS2 || .. || SSn) in vulnerable to the APOP attack,
   for example when the attacker chooses RSA-KEM as component 1 so that
   they can learn SS2

   Similarly, SS = KDF(SS1) XOR KDF(SS2) XOR .. XOR KDF(SSn) under the
   same cirtumstances as above would allow the attacker to learn
   KDF(SS2), which is not as detrimental as learning SS2 directly, but
   can still be avoided cheaply be wrapping the entire construction in
   an outer KDF.

   ~~~ END EDNOTE ~~~

5.1.  Composite KEM CipherText Encoding

   For ease of use when encoding and decoding, the following encoding is
   suggested for the CipherText.

   CompositeKemCT :: SEQUENCE SIZE (2..MAX) of OctetString




Ounsworth & Gray         Expires January 3, 2023                [Page 9]

Internet-Draft              PQ Composite Keys                  July 2022


   This will allow implementations a simple and uniform way to
   distribute the set of Cipher texts required for the decapsulation
   process.
   It is not mandatory as an implementation could choose to store the
   set of Cipher texts produced in a different format, so long as they
   are available at time of decapsulation.

5.2.  Generic vs Explicit Variants

   TBD if we need to say anything, or if it's all covered already by the
   keys draft.

6.  In Practice

   This section addresses practical issues of how this draft affects
   other protocols and standards.

   EDNOTE 10: Possible topics to address:

   o  The size of these certs and cert chains.

   o  In particular, implications for (large) composite keys /
      signatures / certs on the handshake stages of TLS and IKEv2.

   o  If a cert in the chain is a composite cert then does the whole
      chain need to be of composite Certs?

   o  We could also explain that the root CA cert does not have to be of
      the same algorithms.  The root cert SHOULD NOT be transferred in
      the authentication exchange to save transport overhead and thus it
      can be different than the intermediate and leaf certs.

   o  We could talk about overhead (size and processing).

   o  We could also discuss backwards compatibility.

   o  We could include a subsection about implementation considerations.

7.  IANA Considerations

   The ASN.1 module OID is TBD.

8.  Security Considerations








Ounsworth & Gray         Expires January 3, 2023               [Page 10]

Internet-Draft              PQ Composite Keys                  July 2022


8.1.  Policy for Deprecated and Acceptable Algorithms

   Traditionally, a public key, certificate, or signature contains a
   single cryptographic algorithm.  If and when an algorithm becomes
   deprecated (for example, RSA-512, or SHA1), it is obvious that
   structures using that algorithm are implicitly revoked.

   In the composite model this is less obvious since implementers may
   decide that certain cryptographic algorithms have complementary
   security properties and are acceptable in combination even though one
   or both algorithms are deprecated for individual use.  As such, a
   single composite public key, certificate, signature, or ciphertext
   may contain a mixture of deprecated and non-deprecated algorithms.

   Specifying behaviour in these cases is beyond the scope of this
   document, but should be considered by implementors and potentially in
   addiniotal standards.

   EDNOTE: Max is working on a CRL mechanism to accomplish this.

8.2.  OR Modes

   TODO

8.3.  Cryptographic review of combiner

   EDNOTE: LAMPS should probably request CFRF review of this draft to
   ensure that the combiner is resistant to all known cryptograhpic
   attacks.

8.3.1.  APOP Attack on concatenated keys

   See the attack analysis described in summary in [Aviram2021].

   A possible fix, which aligns with [I-D.draft-ietf-tls-hybrid-design],
   would be to have all KEM algorithm definitions for use in CMS specify
   a fixed output length for the shared secret it produces, this would
   preclude attackers at runtime from manipulating the length of a
   shared secret so that the next one in the concatenation falls on a
   hash block boundary, which closes the attack mentioned above.

   A natural place to do this would be in [I-D.draft-turner-lamps-nist-
   pqc-kem-certificates].

   EDNOTE: in CMS we are allowing any KDF.  Can we, by construction,
   require only weak security assumptions on the KDF? ~~~ END EDNOTE ~~~





Ounsworth & Gray         Expires January 3, 2023               [Page 11]

Internet-Draft              PQ Composite Keys                  July 2022


8.3.2.  Aviram2022

   [Aviram2022].

   ~~~ BEGIN EDNOTE ~~~ Quotes from Arivom2022:

   This paper is largely critiquing the use of HKDF (HMAC) as a combiner
   for two secrets.  This is not exactly what we are doing here.

   "If we would like to combine two keys, either of which might be
   influenced by an attacker, we need adual-PRF as the keycombiner: That
   is, a function which is a PRF when keyed by either input. "

   The construction offered in [Aviram2022] seems complex.  I don't
   understand why the construction

      +--------------------+---+----------+---+----+---+------------+
      | SS = KDF( KDF(SS1) |   | KDF(SS2) |   | .. |   | KDF(SSn) ) |
      +--------------------+---+----------+---+----+---+------------+
      +--------------------+---+----------+---+----+---+------------+

   is insufficient, even if the chosen KDF is HKDF with the same key
   (salt) used in each KDF() operation.  Maybe the construction offered
   in Aviram2022 has better performance?  If that's its only advantage,
   I would argue for the similicity of using a combination of only the
   supplied KDF.  Although maybe this raises the question of whether the
   combiner should in fact be parametrized for future crypto agility?

9.  References

9.1.  Normative References

   [I-D.ounsworth-pq-composite-keys]
              Ounsworth, M. and M. Pala, "Composite Public and Private
              Keys For Use In Internet PKI", draft-ounsworth-pq-
              composite-keys-01 (work in progress), February 2022.

   [I-D.perret-prat-lamps-cms-pq-kem]
              Perret, L., Prat, J., and M. Ounsworth, "Use of Post-
              Quantum KEM in the Cryptographic Message Syntax (CMS)",
              draft-perret-prat-lamps-cms-pq-kem-00 (work in progress),
              November 2021.

   [RFC1421]  Linn, J., "Privacy Enhancement for Internet Electronic
              Mail: Part I: Message Encryption and Authentication
              Procedures", RFC 1421, DOI 10.17487/RFC1421, February
              1993, <https://www.rfc-editor.org/info/rfc1421>.




Ounsworth & Gray         Expires January 3, 2023               [Page 12]

Internet-Draft              PQ Composite Keys                  July 2022


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              DOI 10.17487/RFC2986, November 2000,
              <https://www.rfc-editor.org/info/rfc2986>.

   [RFC4210]  Adams, C., Farrell, S., Kause, T., and T. Mononen,
              "Internet X.509 Public Key Infrastructure Certificate
              Management Protocol (CMP)", RFC 4210,
              DOI 10.17487/RFC4210, September 2005,
              <https://www.rfc-editor.org/info/rfc4210>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/info/rfc5280>.

   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/info/rfc5652>.

   [RFC5912]  Hoffman, P. and J. Schaad, "New ASN.1 Modules for the
              Public Key Infrastructure Using X.509 (PKIX)", RFC 5912,
              DOI 10.17487/RFC5912, June 2010,
              <https://www.rfc-editor.org/info/rfc5912>.

   [RFC5914]  Housley, R., Ashmore, S., and C. Wallace, "Trust Anchor
              Format", RFC 5914, DOI 10.17487/RFC5914, June 2010,
              <https://www.rfc-editor.org/info/rfc5914>.

   [RFC5958]  Turner, S., "Asymmetric Key Packages", RFC 5958,
              DOI 10.17487/RFC5958, August 2010,
              <https://www.rfc-editor.org/info/rfc5958>.

   [RFC7468]  Josefsson, S. and S. Leonard, "Textual Encodings of PKIX,
              PKCS, and CMS Structures", RFC 7468, DOI 10.17487/RFC7468,
              April 2015, <https://www.rfc-editor.org/info/rfc7468>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.





Ounsworth & Gray         Expires January 3, 2023               [Page 13]

Internet-Draft              PQ Composite Keys                  July 2022


   [RFC8411]  Schaad, J. and R. Andrews, "IANA Registration for the
              Cryptographic Algorithm Object Identifier Range",
              RFC 8411, DOI 10.17487/RFC8411, August 2018,
              <https://www.rfc-editor.org/info/rfc8411>.

   [X.690]    ITU-T, "Information technology - ASN.1 encoding Rules:
              Specification of Basic Encoding Rules (BER), Canonical
              Encoding Rules (CER) and Distinguished Encoding Rules
              (DER)", ISO/IEC 8825-1:2015, November 2015.

9.2.  Informative References

   [Aviram2021]
              "Concatenating Secrets May Be Dangerous", 2022,
              <https://github.com/nimia/kdf_public>.

   [Aviram2022]
              "Practical (Post-Quantum) Key Combiners from One-Wayness
              and Applications to TLS.", n.d.,
              <https://eprint.iacr.org/2022/065>.

   [Bindel2017]
              Bindel, N., Herath, U., McKague, M., and D. Stebila,
              "Transitioning to a quantum-resistant public key
              infrastructure", 2017, <https://link.springer.com/
              chapter/10.1007/978-3-319-59879-6_22>.

   [I-D.ietf-tls-hybrid-design]
              Stebila, D., Fluhrer, S., and S. Gueron, "Hybrid key
              exchange in TLS 1.3", draft-ietf-tls-hybrid-design-04
              (work in progress), January 2022.

   [RFC3279]  Bassham, L., Polk, W., and R. Housley, "Algorithms and
              Identifiers for the Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 3279, DOI 10.17487/RFC3279, April
              2002, <https://www.rfc-editor.org/info/rfc3279>.

   [RFC5990]  Randall, J., Kaliski, B., Brainard, J., and S. Turner,
              "Use of the RSA-KEM Key Transport Algorithm in the
              Cryptographic Message Syntax (CMS)", RFC 5990,
              DOI 10.17487/RFC5990, September 2010,
              <https://www.rfc-editor.org/info/rfc5990>.








Ounsworth & Gray         Expires January 3, 2023               [Page 14]

Internet-Draft              PQ Composite Keys                  July 2022


Appendix A.  Examples

   TBD

Appendix B.  ASN.1 Module

   TBD -- UPDATE

<CODE STARTS>

Composite-Keys-2022
  { TBD }

DEFINITIONS IMPLICIT TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  PUBLIC-KEY, SIGNATURE-ALGORITHM
    FROM AlgorithmInformation-2009  -- RFC 5912 [X509ASN1]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-algorithmInformation-02(58) }

  SubjectPublicKeyInfo
    FROM PKIX1Explicit-2009
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-explicit-02(51) }

  OneAsymmetricKey
    FROM AsymmetricKeyPackageModuleV1
      { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
        pkcs-9(9) smime(16) modules(0)
        id-mod-asymmetricKeyPkgV1(50) } ;

--
-- Object Identifiers
--

-- To be replaced by IANA
id-composite-key OBJECT IDENTIFIER ::= {
  iso(1) identified-organization(3) dod(6) internet(1) private(4)
  enterprise(1) OpenCA(18227) algorithms(2) id-pk-compositeCrypto(1) }

--
-- Public Key
--



Ounsworth & Gray         Expires January 3, 2023               [Page 15]

Internet-Draft              PQ Composite Keys                  July 2022


pk-Composite PUBLIC-KEY ::= {
    id id-composite-key,
    KeyValue CompositePublicKey,
    Params CompositeParams ARE OPTIONAL,
    PrivateKey CompositePrivateKey,
}

CompositePublicKey ::= SEQUENCE SIZE (2..MAX) OF SubjectPublicKeyInfo

CompositePublicKeyOs ::= OCTET STRING (CONTAINING CompositePublicKey
                                            ENCODED BY der)

CompositePublicKeyBs ::= BIT STRING (CONTAINING CompositePublicKey
                                            ENCODED BY der)

CompositePrivateKey ::= SEQUENCE SIZE (2..MAX) OF OneAsymmetricKey


-- pk-explicitComposite - Composite public key information object

pk-explicitComposite{OBJECT IDENTIFIER:id, PUBLIC-KEY:firstPublicKey,
  FirstPublicKeyType, PUBLIC-KEY:secondPublicKey, SecondPublicKeyType}
  PUBLIC-KEY ::= {
    IDENTIFIER id
    KEY ExplicitCompositePublicKey{firstPublicKey, FirstPublicKeyType,
      secondPublicKey, SecondPublicKeyType}
    PARAMS ARE absent
}

   The following ASN.1 object class then automatically generates the
   public key structure from the types defined in pk-explicitComposite.

-- ExplicitCompositePublicKey - The data structure for a composite
-- public key sec-composite-pub-keys and SecondPublicKeyType are needed
-- because PUBLIC-KEY contains a set of public key types, not a single
-- type.
-- TODO The parameters should be optional only if they are marked
-- optional in the PUBLIC-KEY


ExplicitCompositePublicKey{PUBLIC-KEY:firstPublicKey, FirstPublicKeyType,
  PUBLIC-KEY:secondPublicKey, SecondPublicKeyType} ::= SEQUENCE {
    firstPublicKey SEQUENCE {
        params firstPublicKey.&Params OPTIONAL,
        publicKey FirstPublicKeyType
    },
    secondPublicKey SEQUENCE {
        params secondPublicKey.&Params OPTIONAL,



Ounsworth & Gray         Expires January 3, 2023               [Page 16]

Internet-Draft              PQ Composite Keys                  July 2022


        publicKey SecondPublicKeyType
    }
}

END

<CODE ENDS>


Appendix C.  Intellectual Property Considerations

   The following IPR Disclosure relates to this draft:

   https://datatracker.ietf.org/ipr/3588/

Appendix D.  Contributors and Acknowledgements

   This document incorporates contributions and comments from a large
   group of experts.  The Editors would especially like to acknowledge
   the expertise and tireless dedication of the following people, who
   attended many long meetings and generated millions of bytes of
   electronic mail and VOIP traffic over the past year in pursuit of
   this document:

   Serge Mister (Entrust), Douglas Stebila (University of Waterloo).

   We are grateful to all, including any contributors who may have been
   inadvertently omitted from this list.

   This document borrows text from similar documents, including those
   referenced below.  Thanks go to the authors of those documents.
   "Copying always makes things easier and less error prone" -
   [RFC8411].

D.1.  Making contributions

   Additional contributions to this draft are weclome.  Please see the
   working copy of this draft at, as well as open issues at:

   https://github.com/EntrustCorporation/draft-composite-kem/

Authors' Addresses









Ounsworth & Gray         Expires January 3, 2023               [Page 17]

Internet-Draft              PQ Composite Keys                  July 2022


   Mike Ounsworth
   Entrust Limited
   2500 Solandt Road -- Suite 100
   Ottawa, Ontario  K2K 3G5
   Canada

   Email: mike.ounsworth@entrust.com


   John Gray
   Entrust Limited

   Email: john.gray@entrust.com






































Ounsworth & Gray         Expires January 3, 2023               [Page 18]
