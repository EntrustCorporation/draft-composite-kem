---
title: Composite KEM For Use In Internet PKI
abbrev: PQ Composite Keys
# <!-- EDNOTE: Edits the draft name -->
docname: draft-ounsworth-pq-composite-kem-00
# <!-- date: 2012-01-13 -->
# <!-- date: 2012-01 -->
# <!-- date: 2012 -->

# <!-- stand_alone: true -->
ipr: trust200902
area: Security
wg: LAMPS
kw: Internet-Draft
cat: std

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
    -
      ins: M. Ounsworth
      name: Mike Ounsworth
      org: Entrust Limited
      abbrev: Entrust
      street: 2500 Solandt Road â€“ Suite 100
      city: Ottawa, Ontario
      country: Canada
      code: K2K 3G5
      email: mike.ounsworth@entrust.com

    -
      ins: J. Gray
      name: John Gray
      org: Entrust Limited
      abbrev: Entrust
      email: john.gray@entrust.com

normative:
  RFC1421:
  RFC2119:
  RFC2986:
  RFC4210:
  RFC5280:
  RFC5652:
  RFC5912:
  RFC5914:
  RFC5958:
  RFC7468:
  RFC8174:
  RFC8411:
  X.690:
      title: "Information technology - ASN.1 encoding Rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)"
      date: November 2015
      author:
        org: ITU-T
      seriesinfo:
        ISO/IEC: 8825-1:2015
  I-D.draft-ounsworth-pq-composite-keys-01:
  I-D.draft-perret-prat-lamps-cms-pq-kem-00:


# <!-- EDNOTE: full syntax for this defined here: https://github.com/cabo/kramdown-rfc2629 -->

informative:
  
  Bindel2017:
    title: "Transitioning to a quantum-resistant public key infrastructure"
    target: "https://link.springer.com/chapter/10.1007/978-3-319-59879-6_22"
    author:
      -
        ins: N. Bindel
        name: Nina Bindel
      -
        ins: U. Herath
        name: Udyani Herath
      -
        ins: M. McKague
        name: Matthew McKague
      -
        ins: D. Stebila
        name: Douglas Stebila
    date: 2017
  Avirom2021:
    title: "Concatenating Secrets May Be Dangerous"
    target: "https://github.com/nimia/kdf_public"
    Author:
      -
        ins: N. Aviram
        name: Nimrod Aviram
      - 
        ins: Dowling
      - 
        ins: Komargodski
      - 
        ins: Paterson
      - 
        ins: Ronen
      -
        ins: Yogev

# <!--updates:
  # RFC2986
  # RFC5280
  # RFC5652 -->
# <!-- EDNOTE: does it update these anymore?? -->


# <!-- EDNOTE: Add RFC 3279? -->

--- abstract
With the widespread adoption of post-quantum cryptography will come
the need for an entity to possess multiple public keys on different
cryptographic algorithms.  Since the trustworthiness of individual
post-quantum algorithms is at question, a multi-key cryptographic
operation will need to be performed in such a way that breaking it
requires breaking each of the component algorithms individually.
This requires defining new procedures for key encapsulation.

This document defines a Composite key encapsulation mechanism (KEM)
procedure, for use with Composite keys which consist of combinations 
of Encryption or KEM algorithms for each composite component  
algorithm.  

This document is intended to be coupled with the composite keys
structure define in [draft-ounsworth-pq-composite-keys-01] and the CMS KEM-TRANS mechanism in [draft-perret-prat-lamps-cms-pq-kem-00].

<!-- End of Abstract -->


--- middle

# Introduction {#sec-intro}

During the transition to post-quantum cryptography, there will be uncertainty as to the strength of cryptographic algorithms; we will no longer fully trust traditional cryptography such as RSA, Diffie-Hellman, DSA and their elliptic curve variants, but we will also not fully trust their post-quantum replacements until they have had sufficient scrutiny. Unlike previous cryptographic algorithm migrations, the choice of when to migrate and which algorithms to migrate to, is not so clear. Even after the migration period, it may be advantageous for an entity's cryptographic identity to be composed of multiple public-key algorithms.

The deployment of composite public keys, and composite signatures and composite encryption using post-quantum algorithms will face two challenges


- Algorithm strength uncertainty: During the transition period, some post-quantum signature and encryption algorithms will not be fully trusted, while also the trust in legacy public key algorithms will start to erode.  A relying party may learn some time after deployment that a public key algorithm has become untrustworthy, but in the interim, they may not know which algorithm an adversary has compromised.
- Migration: During the transition period, systems will require mechanisms that allow for staged migrations from fully classical to fully post-quantum-aware cryptography.

This document provides a mechanism to address both algorithm strength uncertainty as well as migration concerns by providing formats for encoding multiple public keys and private keys values into existing public key and private key fields.

This document is intended for general applicability anywhere that keys are used within PKIX or CMS structures.


EDNOTE
A previous version of this draft specified alternate algorithm identifiers for AND and OR modes. As well, a similar spec by D-Trust (now co-authors of this draft) also specified a "K of N" mode. In this version of this draft, we have moved those from being top-level OIDs to being algorithm parameters since we can then leverage the same mechanism for both generic and explicit composite modes.


<!-- End of Introduction section -->


## Terminology {#sec-terminology}
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{RFC2119}}  {{RFC8174}} when, and only when, they appear in all capitals, as shown here.

The following terms are used in this document:

ALGORITHM:
          An information object class for identifying the type of
            cryptographic key being encapsulated.

BER:
          Basic Encoding Rules (BER) as defined in [X.690].

CLIENT:
          Any software that is making use of a key at runtime.
          This includes a signer, verifyir, encryptor, decryptor.


COMBINER MODE:
          A combiner mode specifies how keys are to be combined
          together into a single cryptographic operation. 
          Examples include AND, OR, K-of-N.
          Specifications of composite signature or encryption 
          proceedures will need to specify the behaviour under 
          each mode.            

COMPONENT ALGORITHM:
          A single basic algorithm which is contained within a
            composite algorithm.

COMPOSITE ALGORITHM:
          An algorithm which is a sequence of two or more component
            algorithms.

DER:
          Distinguished Encoding Rules as defined in [X.690].


KEM:
        --- borrow the brilliant defintion in tls-hybrid-design or authKEM drafts.

PUBLIC / PRIVATE KEY:
          The public and private portion of an asymmetric cryptographic
            key, making no assumptions about which algorithm.




# Composite Key Encapsulation

Composite key encapsulations takes a CompositePublicKey as its input.  The
CompositePublicKey MUST contain composite keys (Pi .. Pn) which represent 
an algorithm which is a KEM (Key Encapsulation Method), or an algorithm that 
contains encryption or decryption primitive.  For example (RSA).   

This operation outputs a shared-secret and cipher text.   If the 
CompositePublicKey is using an algorithm mode which does not require all keys 
to be used (for example id-composite-or or id-composite-k-of-n), and the
specific component algorithm is not required by the underlying application
usage, then the ciphertext and shared secret for that component is empty.

~~~
Input:  CompositePublicKey (PK1, PK2 .. PKn)

Output:  SS, CT

1.  for i := 1 to n
    a. if PKi is to be skipped
        CTi := emptyOctetString
        SSi := emptyOctetString
        continue to next i

    b. if Pki is of type KEM:
          SSi,CTi := encaps(PKi)

      Else:
        SSi := random_bits(SIZE)
        CTi := encrypt(SSi, PKi)   

  2.   SS = SSi ||  SSn
      CT = CT1, CT2, .., CTn
~~~


# Composite Key Decapsulation

Composite key decapsulations takes a CompositePrivateKey as its input and the
sequence of Cipher texts (ct1 .. ctn) computed by the composite key 
encapsulation method.  The CompositePrivateKey MUST contain composite keys 
(Pi .. Pn) which represent an algorithm which is a KEM (Key Encapsulation Method),
or an algorithm that contains encryption or decryption primitive.  These keys 
MUST consist of the same component keys in the same order as the Composite Key 
Encapsulation process that generated them.  

This operation outputs a shared-secret.   If the CompositePrivateKey is using an
algorithm mode which does not require all keys to be used the specific component 
algorithm is not required by the underlying application usage, then the ciphertext
and shared secret for that component is empty.  


~~~
Input:   CompositePrivateKey = SK1, SK2 .. SKn
          CT = CT1, CT2, .., CTn

Output:  SS

1.    for i := 1 to n
      if Ski is not required and cti = emptyOctetString         
          SSi := emptyOctetString         
      Else, if SKi is of type KEM:
          SSi := decaps(Cti, SKi)
      Else:
          SSi := decrypt(Cti, SKi)

2. Output SS = SSi ||  SSn
~~~

## Composite KEM CipherText Encoding

For ease of use when encoding and decoding, the following encoding is 
suggested for the CipherText.   

CompositeKemCT :: SEQUENCE SIZE (2..MAX) of OctetString

This will allow implementations a simple and uniform way to distribute
the set of Cipher texts required for the decapsulation process.  
It is not mandatory as an implementation could choose to store the
set of Cipher texts produced in a different format, so long as they
are available at time of decapsulation.



## Generic vs Explicit Variants

TBD if we need to say anything, or if it's all covered already by the keys draft.


## Combiner Modes {#sec-combiner-modes}

TBD -- need to define alternate processes for each combiner mode. This text currently just copied from the keys draft.


Once an end entity has been issued multiple public keys, it is easy to imagine different modes and policies for using these keys. For example a logical AND would provide the strictest security by requiring any usage of a composite key to always use all component keys. Meanwhile, a logical OR would provide the greatest migration flexibility by allowing any component key to be used by itself. There can also be modes in between the two extremes such as a "K of N" mode, or a policy explicitly listing acceptable combinations of algorithms.

A combiner mode is represented in a composite public key by an OPTIONAL AlgorithmIdentifier where the semantics are defined in the following sections. Any signature or encryption processes that make use of these modes need to define the precise behaviour under each mode.


### AND Mode {#sec-and-mode}

Indicated by leaving the algorithm parameters ABSENT.

The intention of this mode is that any cryptographic operation involving this composite key MUST use all component keys. This mode is intended to provide the strictest security and for that reason it is the default mode.


### OR Mode {#sec-or-mode}

Indicated by CompositeParams with and algorithm equal to:

~~~ asn.1
id-composite-or OBJECT IDENTIFIER ::= { 
  joint-iso-itu-t(2) country(16) us(840) organization(1) entrust(114027)
  Algorithm(80) Composite(4) id-composite-or(3) }
~~~

EDNOTE: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see {{sec-iana}}.

The parameters of the CompositeParams MUST be ABSENT.

The intention of this mode is that any one component MAY be used by itself; senders MAY use more than one component key but receivers only need to use one to verify or recover the plaintext message. This mode is intended to provide the greatest migration and transition flexibility.

EDNOTE: Potential problem with this mode: logically, as long as the client understands at least one of the component OIDs, but with the structure SEQUENCE OF SubjectPublicKeyInfo it is likely that most ASN.1 parsers will fail on an unrecognized OID.
For more discussion on this point, see: https://github.com/EntrustCorporation/draft-ounsworth-pq-composite-keys/issues/4


### ANY Mode

Indicated by CompositeParams with and algorithm equal to:

~~~ asn.1
id-composite-any OBJECT IDENTIFIER ::= { 
  joint-iso-itu-t(2) country(16) us(840) organization(1) entrust(114027)
  Algorithm(80) Composite(4) id-composite-any(7) }
~~~

EDNOTE: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see {{sec-iana}}.

The parameters of the CompositeParams MUST be ABSENT.

The intention of this mode is for use-cases where the combiner mode is explicitly not carried in the public key and applications need to retrieve the combiner mode from application context, for example from application policy.


### K of N Mode

Indicated by CompositeParams with and algorithm equal to:

~~~ asn.1
id-composite-k-of-n OBJECT IDENTIFIER ::= { 
  joint-iso-itu-t(2) country(16) us(840) organization(1) entrust(114027)
  Algorithm(80) Composite(4) id-composite-k-of-n(2)  }
~~~

EDNOTE: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see {{sec-iana}}.

The parameters of the CompositeParams MUST be CompositeKofNParams:

~~~ asn.1
CompositeKofNParams ::= INTEGER
~~~


The intention of this mode is for use-cases where a subset or threshold scheme is desired. The value in CompositeKofNParams is K, the number of component keys to be used in a single cryptographic operation. The total number of component keys, N, is not carried in the CompositeKofNParams and can be infered either by parsing the CompositePublicKey structure as defined in , or in the case of the explicit composite variant, N may be known based on the PUBLIC-KEY IDENTIFIER.


Clients SHOULD NOT use K of N mode with K = N as it is semantically equivalent to the AND mode defined in .

Clients SHOULD NOT use K of N mode with K = 1 as it is semantically equivanent to the OR mode defined in .

The intention is to improve interoperability between clients that support K of N mode and those that only support AND or OR mode. The signature and encryption processes for K of N mode are more complex to implement than the respective AND and OR modes, and in most cases they would be a superset of the respective AND and OR modes, so it is assumed that any client that supports K of N mode will also support AND and OR modes. The converse is not true; for example a simple client may only support AND mode and would reject a K of N mode with K = N even though it is semantically equivalent to a mode that it supports. Therefore clients that support K of N mode SHOULD use AND mode () and OR mode () in place of K of N mode with K = N and K = 1 respectively.

### Custom Modes

Protocol designers and implementors are free to define other combiner modes.


# In Practice {#sec-in-pract}

This section addresses practical issues of how this draft affects other protocols and standards.


EDNOTE 10: Possible topics to address:

  - The size of these certs and cert chains.
  - In particular, implications for (large) composite keys / signatures / certs on the handshake stages of TLS and IKEv2.
  - If a cert in the chain is a composite cert then does the whole chain need to be of composite Certs?
  - We could also explain that the root CA cert does not have to be of the same algorithms. The root cert SHOULD NOT be transferred in the authentication exchange to save transport overhead and thus it can be different than the intermediate and leaf certs.
  - We could talk about overhead (size and processing).
  - We could also discuss backwards compatibility.
  - We could include a subsection about implementation considerations.


<!-- End of In Practice section -->

# IANA Considerations {#sec-iana}
The ASN.1 module OID is TBD.  


<!-- End of IANA Considerations section -->


# Security Considerations


## Policy for Deprecated and Acceptable Algorithms

Traditionally, a public key, certificate, or signature contains a single cryptographic algorithm. If and when an algorithm becomes deprecated (for example, RSA-512, or SHA1), it is obvious that structures using that algorithm are implicitly revoked.

In the composite model this is less obvious since implementers may decide that certain cryptographic algorithms have complementary security properties and are acceptable in combination even though one or both algorithms are deprecated for individual use. As such, a single composite public key, certificate, signature, or ciphertext may contain a mixture of deprecated and non-deprecated algorithms. 

Specifying behaviour in these cases is beyond the scope of this document, but should be considered by implementors and potentially in addiniotal standards.

EDNOTE: Max is working on a CRL mechanism to accomplish this.


## APOP Attack on concatenated keys

See the attack analysis described in [Avirom2021].

This attack does not apply to the proposal in this document because the attack relies on concatenating secrets using a collision-vulnerable hash: H(ss1 || ss2). This proposal instead uses KDF(ss1 || ss2 || ...) where KDF are key derivation functions allowable in CMS which include PBKDF2 and HMAC, none of which are collision-vulnerable due to multiple internal rounds of hashing.

<!-- End of Security Considerations section -->

# Appendices



## Examples {#appdx-examples}

TBD

## ASN.1 Module

TBD -- UPDATE

~~~ ASN.1

<CODE STARTS>

Composite-Keys-2022
  { TBD }

DEFINITIONS IMPLICIT TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  PUBLIC-KEY, SIGNATURE-ALGORITHM
    FROM AlgorithmInformation-2009  -- RFC 5912 [X509ASN1]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-algorithmInformation-02(58) }

  SubjectPublicKeyInfo
    FROM PKIX1Explicit-2009
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-explicit-02(51) }

  OneAsymmetricKey
    FROM AsymmetricKeyPackageModuleV1
      { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
        pkcs-9(9) smime(16) modules(0)
        id-mod-asymmetricKeyPkgV1(50) } ;

--
-- Object Identifiers
--

-- To be replaced by IANA
id-composite-key OBJECT IDENTIFIER ::= {
  iso(1) identified-organization(3) dod(6) internet(1) private(4) 
  enterprise(1) OpenCA(18227) algorithms(2) id-pk-compositeCrypto(1) }

--
-- Public Key
--

pk-Composite PUBLIC-KEY ::= {
    id id-composite-key,
    KeyValue CompositePublicKey,
    Params CompositeParams ARE OPTIONAL,
    PrivateKey CompositePrivateKey,
}

CompositePublicKey ::= SEQUENCE SIZE (2..MAX) OF SubjectPublicKeyInfo

CompositePublicKeyOs ::= OCTET STRING (CONTAINING CompositePublicKey ENCODED BY der)

CompositePublicKeyBs ::= BIT STRING (CONTAINING CompositePublicKey ENCODED BY der)

CompositePrivateKey ::= SEQUENCE SIZE (2..MAX) OF OneAsymmetricKey


-- pk-explicitComposite - Composite public key information object

pk-explicitComposite{OBJECT IDENTIFIER:id, PUBLIC-KEY:firstPublicKey,
  FirstPublicKeyType, PUBLIC-KEY:secondPublicKey, SecondPublicKeyType} 
  PUBLIC-KEY ::= {
    IDENTIFIER id
    KEY ExplicitCompositePublicKey{firstPublicKey, FirstPublicKeyType,
      secondPublicKey, SecondPublicKeyType}
    PARAMS ARE absent
}

   The following ASN.1 object class then automatically generates the
   public key structure from the types defined in pk-explicitComposite.

-- ExplicitCompositePublicKey - The data structure for a composite 
-- public key sec-composite-pub-keys and SecondPublicKeyType are needed 
-- because PUBLIC-KEY contains a set of public key types, not a single
-- type.
-- TODO The parameters should be optional only if they are marked 
-- optional in the PUBLIC-KEY


ExplicitCompositePublicKey{PUBLIC-KEY:firstPublicKey, FirstPublicKeyType,
  PUBLIC-KEY:secondPublicKey, SecondPublicKeyType} ::= SEQUENCE {
    firstPublicKey SEQUENCE {
        params firstPublicKey.&Params OPTIONAL,
        publicKey FirstPublicKeyType
    },
    secondPublicKey SEQUENCE {
        params secondPublicKey.&Params OPTIONAL,
        publicKey SecondPublicKeyType
    }
}

END

<CODE ENDS>

~~~


## Intellectual Property Considerations

The following IPR Disclosure relates to this draft:

https://datatracker.ietf.org/ipr/3588/



# Contributors and Acknowledgements
This document incorporates contributions and comments from a large group of experts. The Editors would especially like to acknowledge the expertise and tireless dedication of the following people, who attended many long meetings and generated millions of bytes of electronic mail and VOIP traffic over the past year in pursuit of this document:

Serge Mister (Entrust),
Douglas Stebila (University of Waterloo).

We are grateful to all, including any contributors who may have
been inadvertently omitted from this list.

This document borrows text from similar documents, including those referenced below. Thanks go to the authors of those
   documents.  "Copying always makes things easier and less error prone" - [RFC8411].

## Making contributions

Additional contributions to this draft are weclome. Please see the working copy of this draft at, as well as open issues at:

https://github.com/EntrustCorporation/draft-ounsworth-pq-composite-keys


<!-- End of Contributors section -->
